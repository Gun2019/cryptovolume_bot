import os
import requests
import time
import asyncio
from telegram import Bot
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
COINGLASS_API_KEY = os.getenv("COINGLASS_API_KEY")

bot = Bot(token=TELEGRAM_TOKEN)

async def send_signal(symbol, prev_oi, curr_oi):
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}...")
    msg = (
        f"üìà –°–∏–≥–Ω–∞–ª –ø–æ {symbol}!",
        f"\n–†–æ—Å—Ç OI: {curr_oi / prev_oi * 100 - 100:.2f}%"
    )
    await asyncio.to_thread(bot.send_message, chat_id=CHAT_ID, text=''.join(msg))

def get_all_symbols():
    url = 'https://open-api.coinglass.com/public/v1/futures/symbol'
    headers = {'Authorization': f'Bearer {COINGLASS_API_KEY}'}
    try:
        r = requests.get(url, headers=headers)
        print(f"üîç –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã —Å CoinGlass: HTTP {r.status_code}")
        if r.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤: {r.text}")
            return []
        data = r.json().get('data', [])
        symbols = [s['symbol'] for s in data if s.get('symbol') and s.get('symbol').endswith('USDT')]
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤.")
        return symbols
    except Exception as e:
        print(f"‚ÄºÔ∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
        return []

def get_open_interest(symbol):
    url = f'https://open-api.coinglass.com/public/v1/oi?symbol={symbol}'
    headers = {'Authorization': f'Bearer {COINGLASS_API_KEY}'}

    try:
        print(f"üîç –ó–∞–ø—Ä–æ—Å OI –∫ CoinGlass: {url}")
        r = requests.get(url, headers=headers)
        print(f"üì© HTTP —Å—Ç–∞—Ç—É—Å: {r.status_code}")

        if r.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {r.status_code}, –æ—Ç–≤–µ—Ç: {r.text}")
            return 0, 0

        data = r.json().get('data', [])
        if not data:
            print("‚ö†Ô∏è –û—Ç–≤–µ—Ç CoinGlass –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'data'")
            return 0, 0

        oi_data = data[0]
        prev_oi = oi_data.get('prevOI', 0)
        curr_oi = oi_data.get('currOI', 0)
        print(f"‚úÖ OI –ø–æ–ª—É—á–µ–Ω: prevOI={prev_oi}, currOI={curr_oi}")
        return prev_oi, curr_oi

    except Exception as e:
        print(f"‚ÄºÔ∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ OI –¥–ª—è {symbol}: {e}")
        return 0, 0

def get_volume_price(symbol):
    url = f'https://open-api.coinglass.com/public/v1/futures_volume_chart?symbol={symbol}&time_type=1h'
    headers = {'Authorization': f'Bearer {COINGLASS_API_KEY}'}
    try:
        r = requests.get(url, headers=headers)
        if r.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–º–∞/—Ü–µ–Ω—ã –¥–ª—è {symbol}: {r.status_code}")
            return [], []
        data = r.json().get('data', {})
        vol_list = data.get('volList', [])
        price_list = data.get('priceList', [])
        print(f"üìà –û–±—ä–µ–º–æ–≤: {len(vol_list)}, —Ü–µ–Ω: {len(price_list)}")
        return vol_list, price_list
    except Exception as e:
        print(f"‚ÄºÔ∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–º–∞/—Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
        return [], []

async def monitor():
    print("üöÄ –ó–∞–ø—É—Å–∫ monitor()")
    print("‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
    print("TELEGRAM_TOKEN exists:", bool(TELEGRAM_TOKEN))
    print("CHAT_ID:", CHAT_ID)
    print("COINGLASS_API_KEY exists:", bool(COINGLASS_API_KEY))

    await asyncio.to_thread(bot.send_message, chat_id=CHAT_ID, text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (—Ç–æ–ª—å–∫–æ CoinGlass)")

    symbols = get_all_symbols()
    if not symbols:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤. –û—Å—Ç–∞–Ω–æ–≤.")
        return

    while True:
        for symbol in symbols:
            try:
                prev_oi, curr_oi = get_open_interest(symbol)
                vol_list, price_list = get_volume_price(symbol)

                if len(vol_list) < 2 or len(price_list) < 2:
                    print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}")
                    continue

                volume_now = vol_list[-1].get('value', 0)
                volume_prev = vol_list[-2].get('value', 0)
                price_now = price_list[-1].get('value', 0)
                price_prev = price_list[-2].get('value', 0)

                volume_rising = volume_now >= 2_000_000
                oi_growing = curr_oi > prev_oi * 1.05
                volume_not_falling = volume_now >= volume_prev * 0.9
                price_stable = abs(price_now - price_prev) / price_prev < 0.03  # –º–µ–Ω–µ–µ 3% –∏–∑–º–µ–Ω–µ–Ω–∏—è

                if oi_growing and volume_rising and volume_not_falling and price_stable:
                    await send_signal(symbol, prev_oi, curr_oi)
                    await asyncio.sleep(1)
                else:
                    print(f"‚è≥ {symbol}: —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å {symbol}: {e}")
        await asyncio.sleep(600)

if __name__ == '__main__':
    asyncio.run(monitor())
