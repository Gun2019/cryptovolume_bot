import os
import requests
import time
import asyncio
from telegram import Bot

# –ù–∞ Render –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é, dotenv –Ω–µ –Ω—É–∂–µ–Ω
# from dotenv import load_dotenv
# load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
COINGLASS_API_KEY = os.getenv("COINGLASS_API_KEY")

bot = Bot(token=TELEGRAM_TOKEN)

sent_signals = {}  # —Å–ª–æ–≤–∞—Ä—å: symbol -> timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
SIGNAL_REPEAT_INTERVAL = 600  # 10 –º–∏–Ω—É—Ç

async def send_signal(symbol, oi_change, volume):
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}...")
    msg = (
        f"üìà –°–∏–≥–Ω–∞–ª –ø–æ {symbol}!",
        f"\nOI —Ä–æ—Å—Ç: {oi_change}%",
        f"\n–û–±—ä–µ–º: {volume:,}$"
    )
    await asyncio.to_thread(bot.send_message, chat_id=CHAT_ID, text=''.join(msg))
    sent_signals[symbol] = time.time()

def get_filtered_signals():
    url = "https://api.coinglass.com/api/futures?volume_increase=true&open_interest_increase=true&price_drop_limit=3"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {COINGLASS_API_KEY}"
    }

    try:
        r = requests.get(url, headers=headers)
        print(f"üîç –ó–∞–ø—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: HTTP {r.status_code}")

        if r.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {r.status_code} ‚Äî {r.text}")
            return []

        data = r.json().get('data', [])
        return data

    except Exception as e:
        print(f"‚ÄºÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        return []

async def monitor():
    print("üöÄ –ó–∞–ø—É—Å–∫ monitor()")
    print("‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
    print("TELEGRAM_TOKEN exists:", bool(TELEGRAM_TOKEN))
    print("CHAT_ID:", CHAT_ID)
    print("COINGLASS_API_KEY exists:", bool(COINGLASS_API_KEY))

    await asyncio.to_thread(bot.send_message, chat_id=CHAT_ID, text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (—Ñ–∏–ª—å—Ç—Ä CoinGlass)")

    while True:
        signals = get_filtered_signals()

        if not signals:
            print("‚è≥ –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")
        else:
            current_time = time.time()
            for s in signals:
                try:
                    symbol = s.get('symbol')
                    oi_change = s.get('oiChangePercent', 0)
                    volume = s.get('volumeUsd', 0)

                    if volume >= 1_000_000 and oi_change > 5:
                        last_sent = sent_signals.get(symbol, 0)
                        if current_time - last_sent >= SIGNAL_REPEAT_INTERVAL:
                            await send_signal(symbol, oi_change, volume)
                            await asyncio.sleep(1)
                        else:
                            print(f"üîÅ {symbol} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ ‚Äî –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {int(SIGNAL_REPEAT_INTERVAL - (current_time - last_sent))}—Å")
                    else:
                        print(f"üî∏ –ü—Ä–æ–ø—É—Å–∫ {symbol}: –æ–±—ä–µ–º –∏–ª–∏ OI –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–æ—Ä–æ–≥—É.")
                except Exception as e:
                    print(f"‚ÄºÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")

        await asyncio.sleep(600)

if __name__ == '__main__':
    print("üü¢ main.py —Å—Ç–∞—Ä—Ç—É–µ—Ç...")
    try:
        asyncio.run(monitor())
    except Exception as e:
        print(f"‚ÄºÔ∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
